{"version":3,"file":"list-C_mPcFHx.js","sources":["../../src/features/disputes/list.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataTable, Column } from '@/components/ui/DataTable';\r\nimport { ConfirmDialog } from '@/components/ui/ConfirmDialog';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { toast } from 'sonner';\r\nimport { format } from 'date-fns';\r\nimport { AlertTriangle, User, CheckCircle, MessageSquare } from 'lucide-react';\r\nimport { useAdminList } from '@/hooks/useAdminList';\r\nimport { useAdminMutation } from '@/hooks/useAdminMutation';\r\n\r\ninterface Dispute {\r\n  id: number;\r\n  order_id: number;\r\n  type: 'refund' | 'quality' | 'delivery' | 'other';\r\n  state: 'open' | 'in_review' | 'resolved';\r\n  buyer: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n  seller: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n  amount: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nfunction DisputesList() {\r\n  const navigate = useNavigate();\r\n  const [assignDialog, setAssignDialog] = useState<{\r\n    open: boolean;\r\n    disputeId: number | null;\r\n  }>({ open: false, disputeId: null });\r\n  const [resolveDialog, setResolveDialog] = useState<{\r\n    open: boolean;\r\n    disputeId: number | null;\r\n  }>({ open: false, disputeId: null });\r\n\r\n  const { data, isLoading } = useAdminList<Dispute>({\r\n    endpoint: '/disputes',\r\n    initialSearchTerm: '',\r\n  });\r\n\r\n  const { update } = useAdminMutation<Dispute>({\r\n    endpoint: '/disputes',\r\n    invalidateQueries: ['admin-list', '/disputes'],\r\n  });\r\n\r\n  const handleAssignModerator = (disputeId: number) => {\r\n    setAssignDialog({ open: true, disputeId });\r\n  };\r\n\r\n  const handleResolve = (disputeId: number) => {\r\n    setResolveDialog({ open: true, disputeId });\r\n  };\r\n\r\n  const confirmAssign = async () => {\r\n    if (assignDialog.disputeId) {\r\n      try {\r\n        await update(assignDialog.disputeId, { state: 'in_review' });\r\n        toast.success('Moderator Assigned', {\r\n          description: 'A moderator has been assigned to this dispute.',\r\n        });\r\n      } catch (error: any) {\r\n        console.error('Failed to assign moderator:', error);\r\n        // Error is already handled by the hook\r\n      }\r\n    }\r\n    setAssignDialog({ open: false, disputeId: null });\r\n  };\r\n\r\n  const confirmResolve = async () => {\r\n    if (resolveDialog.disputeId) {\r\n      try {\r\n        await update(resolveDialog.disputeId, { state: 'resolved' });\r\n        toast.success('Dispute Resolved', {\r\n          description: 'The dispute has been marked as resolved.',\r\n        });\r\n      } catch (error: any) {\r\n        console.error('Failed to resolve dispute:', error);\r\n        // Error is already handled by the hook\r\n      }\r\n    }\r\n    setResolveDialog({ open: false, disputeId: null });\r\n  };\r\n\r\n  const columns: Column<Dispute>[] = [\r\n    {\r\n      key: 'id',\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      render: (value) => `#${value}`,\r\n    },\r\n    {\r\n      key: 'order_id',\r\n      title: 'Order',\r\n      dataIndex: 'order_id',\r\n      render: (value) => (\r\n        <Button\r\n          variant=\"link\"\r\n          onClick={() => navigate(`/admin/orders/${value}`)}\r\n          className=\"p-0 h-auto\"\r\n        >\r\n          Order #{value}\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      key: 'type',\r\n      title: 'Type',\r\n      dataIndex: 'type',\r\n      render: (value) => (\r\n        <Badge variant=\"outline\" className=\"capitalize\">\r\n          {value}\r\n        </Badge>\r\n      ),\r\n    },\r\n    {\r\n      key: 'state',\r\n      title: 'Status',\r\n      dataIndex: 'state',\r\n      render: (value) => (\r\n        <Badge \r\n          variant={\r\n            value === 'resolved' ? 'default' :\r\n            value === 'in_review' ? 'secondary' : 'destructive'\r\n          }\r\n          className=\"capitalize\"\r\n        >\r\n          {value.replace('_', ' ')}\r\n        </Badge>\r\n      ),\r\n    },\r\n    {\r\n      key: 'buyer',\r\n      title: 'Buyer',\r\n      dataIndex: 'buyer',\r\n      render: (value) => (\r\n        <div>\r\n          <p className=\"font-medium\">{value.name}</p>\r\n          <p className=\"text-sm text-muted-foreground\">{value.email}</p>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: 'amount',\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      render: (value) => `$${value.toFixed(2)}`,\r\n    },\r\n    {\r\n      key: 'created_at',\r\n      title: 'Created',\r\n      dataIndex: 'created_at',\r\n      render: (value) => format(new Date(value), 'MMM dd, yyyy'),\r\n    },\r\n  ];\r\n\r\n  const bulkActions = [\r\n    {\r\n      label: 'Assign Moderator',\r\n      onClick: () => handleBulkAction('Assign Moderator'),\r\n      icon: <User className=\"h-4 w-4\" />,\r\n    },\r\n    {\r\n      label: 'Resolve',\r\n      onClick: () => handleBulkAction('Resolve'),\r\n      icon: <CheckCircle className=\"h-4 w-4\" />,\r\n    },\r\n  ];\r\n\r\n  const handleBulkAction = (action: string) => {\r\n    toast.info('Bulk Action', {\r\n      description: `${action} applied to selected disputes.`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">Disputes</h1>\r\n          <p className=\"text-muted-foreground\">Manage customer disputes and resolutions</p>\r\n        </div>\r\n      </div>\r\n\r\n      <DataTable\r\n        data={data || []}\r\n        columns={columns}\r\n        loading={isLoading}\r\n        pagination={{\r\n          current: 1,\r\n          pageSize: 10,\r\n          total: data?.length || 0,\r\n          onChange: (page, pageSize) => {\r\n            // Handle pagination\r\n          },\r\n        }}\r\n        actions={{\r\n          view: (record) => navigate(`/admin/disputes/${record.id}`),\r\n          custom: [\r\n            {\r\n              label: 'Assign Moderator',\r\n              onClick: (record) => handleAssignModerator(record.id),\r\n              icon: <User className=\"h-4 w-4\" />,\r\n            },\r\n            {\r\n              label: 'Resolve',\r\n              onClick: (record) => handleResolve(record.id),\r\n              icon: <CheckCircle className=\"h-4 w-4\" />,\r\n            },\r\n          ],\r\n        }}\r\n        bulkActions={bulkActions}\r\n      />\r\n\r\n      <ConfirmDialog\r\n        open={assignDialog.open}\r\n        onOpenChange={(open) => setAssignDialog({ open, disputeId: null })}\r\n        title=\"Assign Moderator\"\r\n        description=\"Are you sure you want to assign a moderator to this dispute?\"\r\n        confirmText=\"Assign\"\r\n        onConfirm={confirmAssign}\r\n      />\r\n\r\n      <ConfirmDialog\r\n        open={resolveDialog.open}\r\n        onOpenChange={(open) => setResolveDialog({ open, disputeId: null })}\r\n        title=\"Resolve Dispute\"\r\n        description=\"Are you sure you want to mark this dispute as resolved?\"\r\n        confirmText=\"Resolve\"\r\n        onConfirm={confirmResolve}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisputesList;\r\n"],"names":["DisputesList","navigate","useNavigate","assignDialog","setAssignDialog","useState","resolveDialog","setResolveDialog","data","isLoading","useAdminList","update","useAdminMutation","handleAssignModerator","disputeId","handleResolve","confirmAssign","toast","error","confirmResolve","columns","value","jsxDEV","Button","Badge","format","bulkActions","handleBulkAction","User","CheckCircle","action","DataTable","page","pageSize","record","ConfirmDialog","open"],"mappings":"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"}