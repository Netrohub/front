{"version":3,"file":"sellerApi-CU2-opR3.js","sources":["../../src/lib/sellerApi.ts"],"sourcesContent":["import { QueryClient, useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { toast } from 'sonner';\r\n\r\n// API Configuration\r\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'https://api.nxoland.com/api';\r\n\r\n// Types\r\ninterface ApiResponse<T = any> {\r\n  data: T;\r\n  message?: string;\r\n  status: 'success' | 'error';\r\n  errors?: Record<string, string[]>;\r\n}\r\n\r\n// Seller-specific Types\r\nexport interface SellerDashboard {\r\n  stats: {\r\n    totalRevenue: number;\r\n    totalOrders: number;\r\n    activeListings: number;\r\n    pendingPayouts: number;\r\n  };\r\n  recentOrders: SellerOrder[];\r\n  recentPayouts: SellerPayout[];\r\n}\r\n\r\nexport interface SellerOrder {\r\n  id: number;\r\n  buyer: {\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n  };\r\n  product: {\r\n    id: number;\r\n    title: string;\r\n    price: number;\r\n  };\r\n  status: 'pending' | 'processing' | 'completed' | 'cancelled';\r\n  total: number;\r\n  created_at: string;\r\n}\r\n\r\nexport interface SellerPayout {\r\n  id: number;\r\n  amount: number;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  method: string;\r\n  reference: string;\r\n  created_at: string;\r\n  processed_at?: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  discount_price?: number;\r\n  category: string;\r\n  subcategory: string;\r\n  platform?: string;\r\n  level?: string;\r\n  type?: string;\r\n  images: string[];\r\n  tags: string[];\r\n  status: 'active' | 'inactive' | 'pending' | 'sold';\r\n  seller_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// Seller API Client Class\r\nclass SellerApiClient {\r\n  private baseURL: string;\r\n\r\n  constructor(baseURL: string) {\r\n    this.baseURL = baseURL;\r\n  }\r\n\r\n  async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    // Always get fresh token from localStorage\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n    console.log('üè™ Seller API Request:', {\r\n      url,\r\n      method: options.method || 'GET',\r\n      endpoint,\r\n      hasToken: !!token\r\n    });\r\n    \r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` }),\r\n      ...options.headers,\r\n    };\r\n\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      console.error('‚ùå Seller API Error:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        error: errorData\r\n      });\r\n      throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('‚úÖ Seller API Success:', { endpoint, data });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // Seller Dashboard\r\n  async getDashboard(): Promise<SellerDashboard> {\r\n    const response = await this.request<SellerDashboard>('/seller/dashboard');\r\n    return response.data;\r\n  }\r\n\r\n  // Seller Products\r\n  async getProducts(): Promise<Product[]> {\r\n    const response = await this.request<Product[]>('/seller/products');\r\n    return response.data;\r\n  }\r\n\r\n  async createProduct(data: FormData): Promise<Product> {\r\n    const response = await this.request<Product>('/seller/products', {\r\n      method: 'POST',\r\n      headers: {}, // Let browser set Content-Type for FormData\r\n      body: data,\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async updateProduct(id: number, data: FormData): Promise<Product> {\r\n    const response = await this.request<Product>(`/seller/products/${id}`, {\r\n      method: 'PUT',\r\n      headers: {}, // Let browser set Content-Type for FormData\r\n      body: data,\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async deleteProduct(id: number): Promise<void> {\r\n    await this.request(`/seller/products/${id}`, { method: 'DELETE' });\r\n  }\r\n\r\n  // Seller Orders\r\n  async getOrders(): Promise<SellerOrder[]> {\r\n    const response = await this.request<SellerOrder[]>('/seller/orders');\r\n    return response.data;\r\n  }\r\n\r\n  // Seller Payouts\r\n  async getPayouts(): Promise<SellerPayout[]> {\r\n    const response = await this.request<SellerPayout[]>('/seller/payouts');\r\n    return response.data;\r\n  }\r\n\r\n  // Seller Notifications\r\n  async getNotifications(): Promise<any[]> {\r\n    const response = await this.request<any[]>('/seller/notifications');\r\n    return response.data;\r\n  }\r\n\r\n  // Product Listing\r\n  async listGamingAccount(data: FormData): Promise<Product> {\r\n    const response = await this.request<Product>('/seller/listing/gaming-account', {\r\n      method: 'POST',\r\n      headers: {},\r\n      body: data,\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async listSocialAccount(data: FormData): Promise<Product> {\r\n    const response = await this.request<Product>('/seller/listing/social-account', {\r\n      method: 'POST',\r\n      headers: {},\r\n      body: data,\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// Create and export seller API client instance\r\nexport const sellerApiClient = new SellerApiClient(API_BASE_URL);\r\n\r\n// Seller Query Keys - standardized for React Query\r\nexport const sellerQueryKeys = {\r\n  all: ['seller'] as const,\r\n  dashboard: () => [...sellerQueryKeys.all, 'dashboard'] as const,\r\n  products: () => [...sellerQueryKeys.all, 'products'] as const,\r\n  orders: () => [...sellerQueryKeys.all, 'orders'] as const,\r\n  payouts: () => [...sellerQueryKeys.all, 'payouts'] as const,\r\n  notifications: () => [...sellerQueryKeys.all, 'notifications'] as const,\r\n} as const;\r\n\r\n// React Query Hooks for Seller API\r\n\r\n// Query Hooks\r\nexport const useSellerDashboard = () => {\r\n  return useQuery({\r\n    queryKey: sellerQueryKeys.dashboard(),\r\n    queryFn: () => sellerApiClient.getDashboard(),\r\n    staleTime: 2 * 60 * 1000, // 2 minutes\r\n  });\r\n};\r\n\r\nexport const useSellerProducts = () => {\r\n  return useQuery({\r\n    queryKey: sellerQueryKeys.products(),\r\n    queryFn: () => sellerApiClient.getProducts(),\r\n    staleTime: 2 * 60 * 1000, // 2 minutes\r\n  });\r\n};\r\n\r\nexport const useSellerOrders = () => {\r\n  return useQuery({\r\n    queryKey: sellerQueryKeys.orders(),\r\n    queryFn: () => sellerApiClient.getOrders(),\r\n    staleTime: 2 * 60 * 1000, // 2 minutes\r\n  });\r\n};\r\n\r\nexport const useSellerPayouts = () => {\r\n  return useQuery({\r\n    queryKey: sellerQueryKeys.payouts(),\r\n    queryFn: () => sellerApiClient.getPayouts(),\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n};\r\n\r\nexport const useSellerNotifications = () => {\r\n  return useQuery({\r\n    queryKey: sellerQueryKeys.notifications(),\r\n    queryFn: () => sellerApiClient.getNotifications(),\r\n    staleTime: 1 * 60 * 1000, // 1 minute\r\n  });\r\n};\r\n\r\n// Mutation Hooks\r\nexport const useCreateProduct = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: (data: FormData) => sellerApiClient.createProduct(data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: sellerQueryKeys.products() });\r\n      toast.success('Product created successfully!');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.message || 'Failed to create product');\r\n    },\r\n  });\r\n};\r\n\r\nexport const useUpdateProduct = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ id, data }: { id: number; data: FormData }) => sellerApiClient.updateProduct(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: sellerQueryKeys.products() });\r\n      toast.success('Product updated successfully!');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.message || 'Failed to update product');\r\n    },\r\n  });\r\n};\r\n\r\nexport const useDeleteProduct = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: (id: number) => sellerApiClient.deleteProduct(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: sellerQueryKeys.products() });\r\n      toast.success('Product deleted successfully!');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.message || 'Failed to delete product');\r\n    },\r\n  });\r\n};\r\n\r\n// Export query client for React Query\r\nexport const queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n      refetchOnWindowFocus: false,\r\n    },\r\n  },\r\n});\r\n\r\nexport default sellerApiClient;\r\n"],"names":["API_BASE_URL","SellerApiClient","baseURL","__publicField","endpoint","options","url","token","headers","response","errorData","data","id","sellerApiClient","sellerQueryKeys","useCreateProduct","queryClient","useQueryClient","useMutation","toast","error","QueryClient"],"mappings":"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"}