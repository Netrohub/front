{"version":3,"file":"list-DgtpbVfK.js","sources":["../../src/features/orders/list.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataTable, Column } from '@/components/ui/DataTable';\r\nimport { ConfirmDialog } from '@/components/ui/ConfirmDialog';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { toast } from 'sonner';\r\nimport { format } from 'date-fns';\r\nimport { CreditCard, Shield, RotateCcw } from 'lucide-react';\r\nimport { useAdminList } from '@/hooks/useAdminList';\r\nimport { useAdminMutation } from '@/hooks/useAdminMutation';\r\n\r\ninterface Order {\r\n  id: number;\r\n  buyer: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n  seller: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n  amount: number;\r\n  escrow_status: 'pending' | 'held' | 'released' | 'refunded';\r\n  dispute_flag: boolean;\r\n  created_at: string;\r\n}\r\n\r\nfunction OrdersList() {\r\n  const navigate = useNavigate();\r\n  const [releaseDialog, setReleaseDialog] = useState<{\r\n    open: boolean;\r\n    orderId: number | null;\r\n  }>({ open: false, orderId: null });\r\n  const [refundDialog, setRefundDialog] = useState<{\r\n    open: boolean;\r\n    orderId: number | null;\r\n  }>({ open: false, orderId: null });\r\n\r\n  const { data, isLoading, refetch } = useAdminList<Order>({\r\n    endpoint: '/orders',\r\n    initialSearchTerm: '',\r\n  });\r\n\r\n  const { update } = useAdminMutation<Order>({\r\n    endpoint: '/orders',\r\n    invalidateQueries: ['admin-list', '/orders'],\r\n  });\r\n\r\n  const handleReleaseEscrow = (orderId: number) => {\r\n    setReleaseDialog({ open: true, orderId });\r\n  };\r\n\r\n  const handleRefund = (orderId: number) => {\r\n    setRefundDialog({ open: true, orderId });\r\n  };\r\n\r\n  const confirmRelease = async () => {\r\n    if (releaseDialog.orderId) {\r\n      try {\r\n        await update(releaseDialog.orderId, { escrow_status: 'released' });\r\n        toast.success('Escrow Released', {\r\n          description: 'Funds have been released to the seller.',\r\n        });\r\n      } catch (error: any) {\r\n        console.error('Failed to release escrow:', error);\r\n        // Error is already handled by the hook\r\n      }\r\n    }\r\n    setReleaseDialog({ open: false, orderId: null });\r\n  };\r\n\r\n  const confirmRefund = async () => {\r\n    if (refundDialog.orderId) {\r\n      try {\r\n        await update(refundDialog.orderId, { escrow_status: 'refunded' });\r\n        toast.success('Refund Processed', {\r\n          description: 'Order has been refunded to the buyer.',\r\n        });\r\n      } catch (error: any) {\r\n        console.error('Failed to process refund:', error);\r\n        // Error is already handled by the hook\r\n      }\r\n    }\r\n    setRefundDialog({ open: false, orderId: null });\r\n  };\r\n\r\n  const columns: Column<Order>[] = [\r\n    {\r\n      key: 'buyer',\r\n      title: 'Buyer',\r\n      dataIndex: 'buyer',\r\n      render: (value) => (\r\n        <div>\r\n          <p className=\"font-medium\">{value.name}</p>\r\n          <p className=\"text-sm text-muted-foreground\">{value.email}</p>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: 'seller',\r\n      title: 'Seller',\r\n      dataIndex: 'seller',\r\n      render: (value) => (\r\n        <div>\r\n          <p className=\"font-medium\">{value.name}</p>\r\n          <p className=\"text-sm text-muted-foreground\">{value.email}</p>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: 'amount',\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      render: (value) => `$${value.toFixed(2)}`,\r\n    },\r\n    {\r\n      key: 'escrow_status',\r\n      title: 'Escrow Status',\r\n      dataIndex: 'escrow_status',\r\n      render: (value) => (\r\n        <Badge \r\n          variant={\r\n            value === 'released' ? 'default' :\r\n            value === 'held' ? 'secondary' :\r\n            value === 'refunded' ? 'destructive' : 'outline'\r\n          }\r\n          className=\"capitalize\"\r\n        >\r\n          {value}\r\n        </Badge>\r\n      ),\r\n    },\r\n    {\r\n      key: 'dispute_flag',\r\n      title: 'Dispute',\r\n      dataIndex: 'dispute_flag',\r\n      render: (value) => (\r\n        <Badge variant={value ? 'destructive' : 'secondary'}>\r\n          {value ? 'Yes' : 'No'}\r\n        </Badge>\r\n      ),\r\n    },\r\n    {\r\n      key: 'created_at',\r\n      title: 'Created',\r\n      dataIndex: 'created_at',\r\n      render: (value) => format(new Date(value), 'MMM dd, yyyy'),\r\n    },\r\n  ];\r\n\r\n  const bulkActions = [\r\n    {\r\n      label: 'Release Escrow',\r\n      onClick: () => handleBulkAction('Release Escrow'),\r\n      icon: <CreditCard className=\"h-4 w-4\" />,\r\n    },\r\n    {\r\n      label: 'Process Refund',\r\n      onClick: () => handleBulkAction('Process Refund'),\r\n      icon: <RotateCcw className=\"h-4 w-4\" />,\r\n    },\r\n  ];\r\n\r\n  const handleBulkAction = (action: string) => {\r\n    toast.info('Bulk Action', {\r\n      description: `${action} applied to selected orders.`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">Orders</h1>\r\n          <p className=\"text-muted-foreground\">Manage orders and escrow transactions</p>\r\n        </div>\r\n      </div>\r\n\r\n      <DataTable\r\n        data={data || []}\r\n        columns={columns}\r\n        loading={isLoading}\r\n        pagination={{\r\n          current: 1,\r\n          pageSize: 10,\r\n          total: data?.length || 0,\r\n          onChange: (page, pageSize) => {\r\n            // Handle pagination\r\n          },\r\n        }}\r\n        actions={{\r\n          view: (record) => navigate(`/admin/orders/${record.id}`),\r\n          custom: [\r\n            {\r\n              label: 'Release Escrow',\r\n              onClick: (record) => handleReleaseEscrow(record.id),\r\n              icon: <CreditCard className=\"h-4 w-4\" />,\r\n            },\r\n            {\r\n              label: 'Refund',\r\n              onClick: (record) => handleRefund(record.id),\r\n              icon: <RotateCcw className=\"h-4 w-4\" />,\r\n            },\r\n          ],\r\n        }}\r\n        bulkActions={bulkActions}\r\n      />\r\n\r\n      <ConfirmDialog\r\n        open={releaseDialog.open}\r\n        onOpenChange={(open) => setReleaseDialog({ open, orderId: null })}\r\n        title=\"Release Escrow\"\r\n        description=\"Are you sure you want to release the escrow funds to the seller? This action cannot be undone.\"\r\n        confirmText=\"Release\"\r\n        onConfirm={confirmRelease}\r\n      />\r\n\r\n      <ConfirmDialog\r\n        open={refundDialog.open}\r\n        onOpenChange={(open) => setRefundDialog({ open, orderId: null })}\r\n        title=\"Process Refund\"\r\n        description=\"Are you sure you want to refund this order to the buyer? This action cannot be undone.\"\r\n        confirmText=\"Refund\"\r\n        variant=\"destructive\"\r\n        onConfirm={confirmRefund}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OrdersList;\r\n"],"names":["OrdersList","navigate","useNavigate","releaseDialog","setReleaseDialog","useState","refundDialog","setRefundDialog","data","isLoading","useAdminList","update","useAdminMutation","handleReleaseEscrow","orderId","handleRefund","confirmRelease","toast","error","confirmRefund","columns","value","jsxDEV","Badge","format","bulkActions","handleBulkAction","CreditCard","RotateCcw","action","DataTable","page","pageSize","record","ConfirmDialog","open"],"mappings":"uxBA4BA,SAASA,GAAa,CACpB,MAAMC,EAAWC,EAAA,EACX,CAACC,EAAeC,CAAgB,EAAIC,EAAAA,SAGvC,CAAE,KAAM,GAAO,QAAS,KAAM,EAC3B,CAACC,EAAcC,CAAe,EAAIF,EAAAA,SAGrC,CAAE,KAAM,GAAO,QAAS,KAAM,EAE3B,CAAE,KAAAG,EAAM,UAAAC,CAAmB,EAAIC,EAAoB,CACvD,SAAU,UACV,kBAAmB,EAAA,CACpB,EAEK,CAAE,OAAAC,CAAA,EAAWC,EAAwB,CACzC,SAAU,UACV,kBAAmB,CAAC,aAAc,SAAS,CAAA,CAC5C,EAEKC,EAAuBC,GAAoB,CAC/CV,EAAiB,CAAE,KAAM,GAAM,QAAAU,CAAA,CAAS,CAC1C,EAEMC,EAAgBD,GAAoB,CACxCP,EAAgB,CAAE,KAAM,GAAM,QAAAO,CAAA,CAAS,CACzC,EAEME,EAAiB,SAAY,CACjC,GAAIb,EAAc,QAChB,GAAI,CACF,MAAMQ,EAAOR,EAAc,QAAS,CAAE,cAAe,WAAY,EACjEc,EAAM,QAAQ,kBAAmB,CAC/B,YAAa,yCAAA,CACd,CACH,OAASC,EAAY,CACnB,QAAQ,MAAM,4BAA6BA,CAAK,CAElD,CAEFd,EAAiB,CAAE,KAAM,GAAO,QAAS,KAAM,CACjD,EAEMe,EAAgB,SAAY,CAChC,GAAIb,EAAa,QACf,GAAI,CACF,MAAMK,EAAOL,EAAa,QAAS,CAAE,cAAe,WAAY,EAChEW,EAAM,QAAQ,mBAAoB,CAChC,YAAa,uCAAA,CACd,CACH,OAASC,EAAY,CACnB,QAAQ,MAAM,4BAA6BA,CAAK,CAElD,CAEFX,EAAgB,CAAE,KAAM,GAAO,QAAS,KAAM,CAChD,EAEMa,EAA2B,CAC/B,CACE,IAAK,QACL,MAAO,QACP,UAAW,QACX,OAASC,GACPC,EAAAA,OAAC,MAAA,CACC,SAAA,CAAAA,SAAC,IAAA,CAAE,UAAU,cAAe,SAAAD,EAAM,IAAA,EAAlC,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAAuC,EACvCC,SAAC,IAAA,CAAE,UAAU,gCAAiC,WAAM,KAAA,EAApD,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAA0D,CAAA,CAAA,EAF5D,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,GAAA,aAAA,CAAA,EAAA,IAGA,CAAA,EAGJ,CACE,IAAK,SACL,MAAO,SACP,UAAW,SACX,OAASD,GACPC,EAAAA,OAAC,MAAA,CACC,SAAA,CAAAA,SAAC,IAAA,CAAE,UAAU,cAAe,SAAAD,EAAM,IAAA,EAAlC,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAuC,EACvCC,SAAC,IAAA,CAAE,UAAU,gCAAiC,WAAM,KAAA,EAApD,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA0D,CAAA,CAAA,EAF5D,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,CAAA,EAGJ,CACE,IAAK,SACL,MAAO,SACP,UAAW,SACX,OAASD,GAAU,IAAIA,EAAM,QAAQ,CAAC,CAAC,EAAA,EAEzC,CACE,IAAK,gBACL,MAAO,gBACP,UAAW,gBACX,OAASA,GACPC,EAAAA,OAACC,EAAA,CACC,QACEF,IAAU,WAAa,UACvBA,IAAU,OAAS,YACnBA,IAAU,WAAa,cAAgB,UAEzC,UAAU,aAET,SAAAA,CAAA,EARH,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAA,CASA,EAGJ,CACE,IAAK,eACL,MAAO,UACP,UAAW,eACX,OAASA,GACPC,EAAAA,OAACC,EAAA,CAAM,QAASF,EAAQ,cAAgB,YACrC,SAAAA,EAAQ,MAAQ,IAAA,EADnB,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAEA,CAAA,EAGJ,CACE,IAAK,aACL,MAAO,UACP,UAAW,aACX,OAASA,GAAUG,EAAO,IAAI,KAAKH,CAAK,EAAG,cAAc,CAAA,CAC3D,EAGII,EAAc,CAClB,CACE,MAAO,iBACP,QAAS,IAAMC,EAAiB,gBAAgB,EAChD,KAAMJ,EAAAA,OAACK,EAAA,CAAW,UAAU,SAAA,EAAtB,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAgC,CAAA,EAExC,CACE,MAAO,iBACP,QAAS,IAAMD,EAAiB,gBAAgB,EAChD,KAAMJ,EAAAA,OAACM,EAAA,CAAU,UAAU,SAAA,EAArB,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA+B,CAAA,CACvC,EAGIF,EAAoBG,GAAmB,CAC3CZ,EAAM,KAAK,cAAe,CACxB,YAAa,GAAGY,CAAM,8BAAA,CACvB,CACH,EAEA,OACEP,EAAAA,OAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,SAAC,MAAA,CAAI,UAAU,oCACb,SAAAA,EAAAA,OAAC,MAAA,CACC,SAAA,CAAAA,SAAC,KAAA,CAAG,UAAU,qCAAqC,SAAA,QAAA,EAAnD,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAyD,EACzDA,SAAC,IAAA,CAAE,UAAU,wBAAwB,SAAA,uCAAA,EAArC,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA0E,CAAA,CAAA,EAF5E,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,CAAA,EAJF,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAKA,EAEAA,EAAAA,OAACQ,EAAA,CACC,KAAMtB,GAAQ,CAAA,EACd,QAAAY,EACA,QAASX,EACT,WAAY,CACV,QAAS,EACT,SAAU,GACV,OAAOD,GAAA,YAAAA,EAAM,SAAU,EACvB,SAAU,CAACuB,EAAMC,IAAa,CAE9B,CAAA,EAEF,QAAS,CACP,KAAOC,GAAWhC,EAAS,iBAAiBgC,EAAO,EAAE,EAAE,EACvD,OAAQ,CACN,CACE,MAAO,iBACP,QAAUA,GAAWpB,EAAoBoB,EAAO,EAAE,EAClD,KAAMX,EAAAA,OAACK,EAAA,CAAW,UAAU,SAAA,EAAtB,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAgC,CAAA,EAExC,CACE,MAAO,SACP,QAAUM,GAAWlB,EAAakB,EAAO,EAAE,EAC3C,KAAMX,EAAAA,OAACM,EAAA,CAAU,UAAU,SAAA,EAArB,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA+B,CAAA,CACvC,CACF,EAEF,YAAAH,CAAA,EA3BF,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAA,EA8BAH,EAAAA,OAACY,EAAA,CACC,KAAM/B,EAAc,KACpB,aAAegC,GAAS/B,EAAiB,CAAE,KAAA+B,EAAM,QAAS,KAAM,EAChE,MAAM,iBACN,YAAY,iGACZ,YAAY,UACZ,UAAWnB,CAAA,EANb,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAA,EASAM,EAAAA,OAACY,EAAA,CACC,KAAM5B,EAAa,KACnB,aAAe6B,GAAS5B,EAAgB,CAAE,KAAA4B,EAAM,QAAS,KAAM,EAC/D,MAAM,iBACN,YAAY,yFACZ,YAAY,SACZ,QAAQ,cACR,UAAWhB,CAAA,EAPb,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAA,CAQA,CAAA,EAvDF,OAAA,GAAA,CAAA,SAAA,6EAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAwDA,CAEJ"}