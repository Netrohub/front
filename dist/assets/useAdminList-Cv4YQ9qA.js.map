{"version":3,"file":"useAdminList-Cv4YQ9qA.js","sources":["../../src/hooks/useAdminList.ts"],"sourcesContent":["import { useState, useCallback, useMemo } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { apiClient } from '@/lib/api';\r\n\r\ninterface UseAdminListOptions<T> {\r\n  endpoint: string;\r\n  initialSearchTerm?: string;\r\n  pageSize?: number;\r\n  queryKey?: string[];\r\n}\r\n\r\ninterface UseAdminListReturn<T> {\r\n  data: T[];\r\n  isLoading: boolean;\r\n  isProcessing: boolean;\r\n  searchTerm: string;\r\n  setSearchTerm: (term: string) => void;\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n  setPagination: (pagination: Partial<typeof pagination>) => void;\r\n  refetch: () => Promise<void>;\r\n  updateItem: (id: number, data: Partial<T>) => void;\r\n  deleteItem: (id: number) => void;\r\n}\r\n\r\nexport function useAdminList<T extends { id: number }>({\r\n  endpoint,\r\n  initialSearchTerm = '',\r\n  pageSize = 25,\r\n  queryKey,\r\n}: UseAdminListOptions<T>): UseAdminListReturn<T> {\r\n  const queryClient = useQueryClient();\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: pageSize,\r\n    total: 0,\r\n    totalPages: 0,\r\n  });\r\n\r\n  // Generate query key for React Query cache\r\n  const generatedQueryKey = queryKey || ['admin-list', endpoint];\r\n  \r\n  // Use React Query for data fetching with caching\r\n  const { data: queryData, isLoading, refetch: queryRefetch } = useQuery({\r\n    queryKey: [...generatedQueryKey, pagination.page, pagination.limit, searchTerm],\r\n    queryFn: async () => {\r\n      const params = new URLSearchParams({\r\n        page: pagination.page.toString(),\r\n        limit: pagination.limit.toString(),\r\n      });\r\n\r\n      if (searchTerm) {\r\n        params.append('search', searchTerm);\r\n      }\r\n\r\n      const response = await apiClient.request<any>(`/admin${endpoint}?${params}`);\r\n      \r\n      // Handle both array and wrapped responses\r\n      let items: T[] = [];\r\n      let paginationData = {\r\n        total: 0,\r\n        totalPages: 0,\r\n      };\r\n\r\n      if (Array.isArray(response)) {\r\n        items = response;\r\n        paginationData = {\r\n          total: response.length,\r\n          totalPages: Math.ceil(response.length / pagination.limit),\r\n        };\r\n      } else if (response.data) {\r\n        items = response.data;\r\n        if (response.pagination) {\r\n          paginationData = {\r\n            total: response.pagination.total || 0,\r\n            totalPages: response.pagination.total_pages || 0,\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        items,\r\n        pagination: paginationData,\r\n      };\r\n    },\r\n    staleTime: 30 * 1000, // 30 seconds - data is fresh for 30s\r\n    gcTime: 5 * 60 * 1000, // 5 minutes - cache for 5 minutes\r\n    retry: 1,\r\n    onError: (error: any) => {\r\n      console.error(`Failed to fetch ${endpoint}:`, error);\r\n      toast.error('Failed to load data', {\r\n        description: error.message || 'An error occurred while loading data',\r\n      });\r\n    },\r\n  });\r\n\r\n  const data = queryData?.items || [];\r\n  \r\n  // Merge pagination from query data with local state - memoized to prevent re-renders\r\n  const paginationState = useMemo(() => ({\r\n    page: pagination.page,\r\n    limit: pagination.limit,\r\n    total: queryData?.pagination?.total ?? pagination.total,\r\n    totalPages: queryData?.pagination?.totalPages ?? pagination.totalPages,\r\n  }), [pagination.page, pagination.limit, pagination.total, pagination.totalPages, queryData?.pagination?.total, queryData?.pagination?.totalPages]);\r\n\r\n  // Optimistic update for item update\r\n  const updateItem = useCallback((id: number, updates: Partial<T>) => {\r\n    setIsProcessing(true);\r\n    \r\n    const queryKey = [...generatedQueryKey, pagination.page, pagination.limit, searchTerm];\r\n    \r\n    // Optimistically update the cache\r\n    queryClient.setQueryData(queryKey, (oldData: any) => {\r\n      if (!oldData) return oldData;\r\n      \r\n      return {\r\n        ...oldData,\r\n        items: oldData.items.map((item: T) =>\r\n          item.id === id ? { ...item, ...updates } : item\r\n        ),\r\n      };\r\n    });\r\n    \r\n    setIsProcessing(false);\r\n  }, [queryClient, generatedQueryKey, pagination.page, pagination.limit, searchTerm]);\r\n\r\n  // Optimistic update for item delete\r\n  const deleteItem = useCallback((id: number) => {\r\n    setIsProcessing(true);\r\n    \r\n    const queryKey = [...generatedQueryKey, pagination.page, pagination.limit, searchTerm];\r\n    \r\n    // Optimistically update the cache\r\n    queryClient.setQueryData(queryKey, (oldData: any) => {\r\n      if (!oldData) return oldData;\r\n      \r\n      return {\r\n        ...oldData,\r\n        items: oldData.items.filter((item: T) => item.id !== id),\r\n      };\r\n    });\r\n    \r\n    setIsProcessing(false);\r\n  }, [queryClient, generatedQueryKey, pagination.page, pagination.limit, searchTerm]);\r\n\r\n  const refetch = useCallback(async () => {\r\n    await queryRefetch();\r\n  }, [queryRefetch]);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    isProcessing,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    pagination: paginationState,\r\n    setPagination: (updates: Partial<typeof pagination>) => {\r\n      setPagination(prev => ({ ...prev, ...updates }));\r\n    },\r\n    refetch,\r\n    updateItem,\r\n    deleteItem,\r\n  };\r\n}\r\n"],"names":["useAdminList","endpoint","initialSearchTerm","pageSize","queryKey","queryClient","useQueryClient","isProcessing","setIsProcessing","useState","searchTerm","setSearchTerm","pagination","setPagination","generatedQueryKey","queryData","isLoading","queryRefetch","useQuery","params","response","apiClient","items","paginationData","error","toast","data","paginationState","useMemo","_a","_b","updateItem","useCallback","id","updates","oldData","item","deleteItem","refetch","prev"],"mappings":"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"}